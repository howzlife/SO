= simple_form_for @purchase_order do |f|
  - if @purchase_order.errors.any?
    #error_explanation
      %h2= "#{pluralize(@purchase_order.errors.count, "error")} prohibited this purchase_order from being saved:"
      %ul
        - @purchase_order.errors.full_messages.each do |msg|
          %li= msg
  .purcuahseorder-vendor.clear
    .to
      Send To
    .vendor-select
      .vendor-details
      .vendor-change
        %button.small-btn.btn.btn-edit{:type => "button"}
          %i.fa.fa-undo
          %span.text Change
      -# the instance variable below isn't the vendor document that embedded in the purchase order. It's the one embedded in the company. We use the vendors created there in this form. The data from them is then saved to the purchase order's embedded vendor document. We allow vendor information to be changed for the company but not on the purchase orders. This way, if the Company's vendor data changes, the already saved purchase orders' vendor data doesn't. This vendor data is being passed as a hash string.
      = f.select :vendor, @company.vendors.all.map { |r| [r.name, "{'name' => '"+r.name+"','email' => '"+r.email+"', 'contact' => '"+r.contact+"', 'telephone' => '"+r.telephone+"'}"] }, include_blank: true
  .purcuahseorder-input
    = f.label :description
    = f.text_area :description, :placeholder => "enter your order information..."
  .buttons
    = f.hidden_field :number, :value => @purchase_order.number
    = button_to purchase_orders_path, method: 'get', class: 'btn btn-add' do
      %i.fa.fa-undo.fa-fw
      %span.text Cancel
    = f.submit 'Save and email', class: 'btn btn-save'